{"version":3,"sources":["out/resource/parallaxCove_tex.png","components/title/Title.js","components/title/TitleContainer.js","out/DragonBonesScene.js","out/PixiBase.js","components/pixiComponent/PixiComponent.js","components/pixiComponent/FunctionalPixiComponent.js","components/pixiComponent/PixiComponentContainer.js","actions/animationActions.js"],"names":["module","exports","Title","props","state","open","className","currentClassName","this","overlayIsActive","setState","style","position","display","flexDirection","width","height","margin","animationDelay","React","Component","connect","overlay","dispatch","overlayActive","isActive","DragonBonesScene","canvas","skeleton","texJson","texPng","hasText","ARMATURE_DISPLAY_NAME","xOffset","yOffset","animationReady","dragonbonesName","armatureName","animationName","_resources","push","armatureDisplay","xScaleFactor","yScaleFactor","finalScaleFactor","_renderer","scale","x","y","focusCorrectionX","focusCorrectionY","text","childToRemove","getChildByName","TEXT_NAME","removeChildAt","getChildIndex","createText","animation","play","resize","adjustFocus","checkScale","pageX","pageY","mouseX","mouseY","near","armature","getBone","middle","far","offset","factory","window","dragonBones","PixiFactory","parseDragonBonesData","parseTextureAtlasData","_pixiResources","texture","buildArmatureDisplay","name","anchor","alphaFilter","PIXI","AlphaFilter","alpha","filters","addChild","shared","add","alphaHandler","remove","_background","EMPTY","clientWidth","clientHeight","backgroundColor","appendChild","view","setTimeout","stageWidth","stageHeight","reset","_loadResources","deltaTime","render","minFPS","_renderHandler","binaryOptions","loadType","Resource","LOAD_TYPE","XHR","xhrType","XHR_RESPONSE_TYPE","BUFFER","resource","indexOf","once","loader","resources","_onStart","_startRenderTick","load","string","index","align","FunctionalPixiComponent","pixiHandler","gameCanvas","useRef","innerHeight","useEffect","current","addEventListener","resizeRenderer","mouseHandler","touchHandler","removeEventListener","e","parallax","touches","clientX","clientY","ref","TitleContainer","animationText","changeText","type","payload"],"mappings":"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","file":"static/js/4.93241e20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/parallaxCove_tex.7f5aaebf.png\";","import React from 'react';\r\nimport './title.scss';\r\n\r\nexport default class Title extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            open: false,\r\n            className: 'fadeInUp'\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        let currentClassName = (this.props.overlayIsActive === 'true') ? 'fadeOutUp' : 'fadeInUp';\r\n        if(currentClassName !== this.state.className){\r\n            this.setState({className: currentClassName});\r\n        }\r\n\r\n        return (\r\n            <div  style={{position: 'fixed', display: 'flex', flexDirection:'column', width: '100%', height: '100%'}}>\r\n                <div className='title' style={{margin:'auto'}}>\r\n                    <div className={this.state.className + \" animated\"}>Tobias Udd</div>\r\n                    <div className={this.state.className + \" animated subtitle\"} style={{animationDelay: '.8s'}} >Creative Engineer</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import { connect } from \"react-redux\";\r\nimport Title from './Title.js';\r\nimport { overlayActive } from '../../actions/overlayActions.js';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        overlayIsActive: state.overlay.overlayIsActive\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        overlayActive: (isActive) =>\r\n            dispatch(overlayActive(isActive))\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Title);","/**\r\n * How to use\r\n * 1. Load data.\r\n *\r\n * 2. Parse data.\r\n *    factory.parseDragonBonesData();\r\n *    factory.parseTextureAtlasData();\r\n *\r\n * 3. Build armature.\r\n *    armatureDisplay = factory.buildArmatureDisplay(\"armatureName\");\r\n *\r\n * 4. Play animation.\r\n *    armatureDisplay.animation.play(\"animationName\");\r\n *\r\n * 5. Add armature to stage.\r\n *    addChild(armatureDisplay);\r\n */\r\n/// <reference path=\"./dragonBones.d.ts\" />\r\nimport * as PIXI from 'pixi.js';\r\nimport PixiBase from './PixiBase.js';\r\nexport default class DragonBonesScene extends PixiBase {\r\n    constructor(canvas, skeleton, texJson, texPng) {\r\n        super(canvas);\r\n        this.canvas = canvas;\r\n        this.skeleton = skeleton;\r\n        this.texJson = texJson;\r\n        this.texPng = texPng;\r\n        this.hasText = false;\r\n        this.ARMATURE_DISPLAY_NAME = \"armature\";\r\n        this.xOffset = 0;\r\n        this.yOffset = 0;\r\n        this.animationReady = false;\r\n        this.dragonbonesName = \"parallaxCove\";\r\n        this.armatureName = \"Armature\";\r\n        this.animationName = \"animtion0\";\r\n        /*\r\n        The JSON files are loaded by webpack in PixiComponent.js, and can be passed through the constructor.\r\n        The texture atlas data aka tex.png are placed by webpack as is in the directory /static/media. From there they can be loaded by the Pixi loader given the url below.\r\n         */\r\n        /*\r\n        The resource urls are pushed to the _resources array to be loaded.\r\n         */\r\n        this._resources.push(\r\n        // \"src/out/resource/NewProject_ske.json\",\r\n        //\"src/out/resource/NewProject_tex.json\",\r\n        //\"src/out/resource/NewProject_tex.png\"\r\n        this.texPng);\r\n    }\r\n    checkScale(armatureDisplay) {\r\n        // the animation dimensions are 1920x1080\r\n        if ((this._renderer.height > 1080) || (this._renderer.width > 1920)) {\r\n            let xScaleFactor;\r\n            let yScaleFactor;\r\n            let finalScaleFactor;\r\n            xScaleFactor = this._renderer.height / 1080;\r\n            yScaleFactor = this._renderer.width / 1920;\r\n            finalScaleFactor = (xScaleFactor > yScaleFactor) ? xScaleFactor : yScaleFactor;\r\n            finalScaleFactor = (finalScaleFactor < 1) ? 1 : finalScaleFactor;\r\n            armatureDisplay.scale.x = finalScaleFactor;\r\n            armatureDisplay.scale.y = finalScaleFactor;\r\n        }\r\n    }\r\n    adjustFocus(armatureDisplay) {\r\n        let focusCorrectionX = 0;\r\n        let focusCorrectionY = 0;\r\n        if ((this._renderer.width / this._renderer.height) > 0.7) {\r\n            focusCorrectionX = (this._renderer.width < 1300) ? 300 : 0;\r\n            focusCorrectionY = (this._renderer.height < 800) ? 100 : 0;\r\n        }\r\n        else {\r\n            /**let offsetCompensation = (this._renderer.width < 560) ? (this.xOffset / 4) : 0;\r\n            focusCorrectionX = 600 + offsetCompensation;\r\n            focusCorrectionY = 0;**/\r\n        }\r\n        armatureDisplay.x = (this._renderer.width / 2) - this.xOffset + focusCorrectionX;\r\n        armatureDisplay.y = (this._renderer.height / 2) - this.yOffset - focusCorrectionY;\r\n    }\r\n    changeText(text) {\r\n        if (this.hasText) {\r\n            let childToRemove = this.getChildByName(this.TEXT_NAME);\r\n            this.removeChildAt(this.getChildIndex(childToRemove));\r\n            this.hasText = false;\r\n        }\r\n        this.createText(text, 2);\r\n        this.hasText = true;\r\n    }\r\n    playAnimation(animationName) {\r\n        if (this.animationReady) {\r\n            let armatureDisplay = this.getChildByName(this.ARMATURE_DISPLAY_NAME);\r\n            armatureDisplay.animation.play(animationName);\r\n        }\r\n    }\r\n    resizeRenderer(width, height) {\r\n        this._renderer.resize(width, height);\r\n        let armatureDisplay = this.getChildByName(this.ARMATURE_DISPLAY_NAME);\r\n        this.adjustFocus(armatureDisplay);\r\n        this.checkScale(armatureDisplay);\r\n    }\r\n    parallax(pageX, pageY) {\r\n        let mouseX = pageX - 945;\r\n        let mouseY = pageY - 550;\r\n        let armatureDisplay = this.getChildByName(this.ARMATURE_DISPLAY_NAME);\r\n        let near = armatureDisplay.armature.getBone(\"near\");\r\n        let middle = armatureDisplay.armature.getBone(\"middle\");\r\n        let far = armatureDisplay.armature.getBone(\"far\");\r\n        mouseX = mouseX * 0.7;\r\n        mouseY = mouseY * 0.7;\r\n        let bgRatio = 0.01125;\r\n        let midRatio = 0.05;\r\n        let nearRatio = 0.2;\r\n        far.offset.x = mouseX * bgRatio;\r\n        far.offset.y = mouseY * bgRatio;\r\n        near.offset.x = mouseX * nearRatio;\r\n        near.offset.y = mouseY * nearRatio;\r\n        middle.offset.x = mouseX * midRatio;\r\n        middle.offset.y = mouseY * midRatio;\r\n    }\r\n    _onStart() {\r\n        const factory = window.dragonBones.PixiFactory.factory;\r\n        factory.parseDragonBonesData(this.skeleton);\r\n        factory.parseTextureAtlasData(this.texJson, this._pixiResources[this.texPng].texture);\r\n        const armatureDisplay = factory.buildArmatureDisplay(this.armatureName, this.dragonbonesName);\r\n        armatureDisplay.animation.play(this.animationName);\r\n        armatureDisplay.name = this.ARMATURE_DISPLAY_NAME;\r\n        this.animationReady = true;\r\n        armatureDisplay.anchor.x = 0;\r\n        armatureDisplay.anchor.y = 0;\r\n        this.xOffset = (this._renderer.width / 2);\r\n        this.yOffset = (this._renderer.height / 2);\r\n        this.adjustFocus(armatureDisplay);\r\n        this.checkScale(armatureDisplay);\r\n        let alphaFilter = new PIXI.filters.AlphaFilter();\r\n        alphaFilter.alpha = 0;\r\n        armatureDisplay.filters = [alphaFilter];\r\n        /**\r\n        let brush =  PIXI.Sprite.fromImage('https://i.imgur.com/SIfxYjW.png');\r\n        this.addChild(brush);\r\n        armatureDisplay.mask = brush;\r\n        **/\r\n        this.addChild(armatureDisplay);\r\n        PIXI.ticker.shared.add(function alphaHandler() {\r\n            if (alphaFilter.alpha < 1) {\r\n                alphaFilter.alpha += .01;\r\n            }\r\n            else {\r\n                PIXI.ticker.shared.remove(alphaHandler);\r\n            }\r\n        });\r\n        // this.createText(\"booooooooi\", 2);\r\n        //this.hasText = true;\r\n    }\r\n}\r\n","/// <reference path=\"./dragonBones.d.ts\" />\r\nimport * as PIXI from 'pixi.js';\r\nexport default class PixiBase extends PIXI.Container {\r\n    constructor(canvas) {\r\n        super();\r\n        this._background = new PIXI.Sprite(PIXI.Texture.EMPTY);\r\n        this.TEXT_NAME = \"text\";\r\n        this._renderer = new PIXI.WebGLRenderer(canvas.clientWidth, canvas.clientHeight);\r\n        this._renderer.backgroundColor = 0x000000;\r\n        this._resources = [];\r\n        //this._resources.push(BaseDemo.BACKGROUND_URL);\r\n        canvas.appendChild(this._renderer.view);\r\n        //\r\n        setTimeout(() => {\r\n            this.x = this.stageWidth * 0.5;\r\n            this.y = this.stageHeight * 0.5;\r\n            PIXI.loader.reset();\r\n            this._loadResources();\r\n        }, 10);\r\n    }\r\n    _renderHandler(deltaTime) {\r\n        this._renderer.render(this);\r\n    }\r\n    /*\r\n    minFPS caps the delta value, 60 -> delta capped at 1. Delta will go over 1 if the browser is struggling, causing the animation to\r\n    play too fast, as the fps is still 60.\r\n     */\r\n    _startRenderTick() {\r\n        PIXI.ticker.shared.minFPS = 60;\r\n        PIXI.ticker.shared.add(this._renderHandler, this);\r\n    }\r\n    _loadResources() {\r\n        const binaryOptions = { loadType: PIXI.loaders.Resource.LOAD_TYPE.XHR, xhrType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER };\r\n        for (const resource of this._resources) {\r\n            //console.log(resource);\r\n            if (resource.indexOf(\"dbbin\") > 0) {\r\n                PIXI.loader.add(resource, resource, binaryOptions);\r\n            }\r\n            else {\r\n                PIXI.loader.add(resource, resource);\r\n            }\r\n        }\r\n        PIXI.loader.once(\"complete\", (loader, resources) => {\r\n            this._pixiResources = resources;\r\n            /**\r\n            this._background.texture = this._pixiResources[BaseDemo.BACKGROUND_URL].texture;\r\n            this._background.x = -this._background.texture.width * 0.5;\r\n            this._background.y = -this._background.texture.height * 0.5;\r\n            this.addChild(this._background);\r\n            **/\r\n            this._onStart();\r\n            this._startRenderTick(); // Make sure render after dragonBones update.\r\n        });\r\n        PIXI.loader.load();\r\n    }\r\n    createText(string, index) {\r\n        const text = new PIXI.Text(string, { align: \"center\" });\r\n        text.text = string;\r\n        text.name = this.TEXT_NAME;\r\n        text.scale.x = 0.7;\r\n        text.scale.y = 0.7;\r\n        text.x = -text.width * 0.5;\r\n        text.y = 100.0 - this.stageHeight * 0.5;\r\n        this.addChild(text);\r\n        return text;\r\n    }\r\n    get stageWidth() {\r\n        return this._renderer.width;\r\n    }\r\n    get stageHeight() {\r\n        return this._renderer.height;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './pixiComponent.scss';\r\nimport TitleContainer from '../title/TitleContainer.js';\r\nimport DragonBonesScene from '../../out/DragonBonesScene.js';\r\n\r\nimport skeleton from '../../out/resource/parallaxCove_ske.json';\r\nimport texJson from \"../../out/resource/parallaxCove_tex.json\";\r\nimport texPng from \"../../out/resource/parallaxCove_tex.png\"; //Import so webpack puts the png in the build/static/media folder. Webpack returns the path to the file.\r\n\r\n//import changeText from \"../../actions/animationActions\";\r\n\r\nexport default class PixiComponent extends React.Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.gameCanvas = null;\r\n        this.state = {\r\n            pixiHandler: [],\r\n            readyForUpdate: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let component = this;\r\n        component.setState({pixiHandler: new DragonBonesScene(this.gameCanvas, skeleton, texJson, texPng)});\r\n        component.setState({readyForUpdate: true});\r\n        window.addEventListener(\"resize\", this.resizeRenderer);\r\n        window.addEventListener('mousemove', this.mouseHandler);\r\n        window.addEventListener('touchmove', this.touchHandler);\r\n    }\r\n\r\n    mouseHandler = (e) => {\r\n        let pageX = e.pageX;\r\n        let pageY = e.pageY;\r\n        this.state.pixiHandler.parallax(pageX, pageY);\r\n    }\r\n\r\n    touchHandler = (e) => {\r\n        let pageX = e.touches[0].clientX;\r\n        let pageY = e.touches[0].clientY;\r\n        this.state.pixiHandler.parallax(pageX, pageY);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.state.readyForUpdate) {\r\n            this.state.pixiHandler.playAnimation(this.props.animation);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.resizeRenderer);\r\n        window.removeEventListener(\"mousemove\", this.mouseHandler);\r\n        window.removeEventListener(\"touchmove\", this.touchHandler);\r\n    }\r\n\r\n    resizeRenderer = () =>  {\r\n        this.state.pixiHandler.resizeRenderer(this.gameCanvas.clientWidth, window.innerHeight);\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render(){\r\n        let component = this;\r\n        let height = window.innerHeight;\r\n\r\n        return (\r\n            <div>\r\n                <div style={{display:\"flex\", flexDirection: \"column\"}}>\r\n                    <div className=\"pixiCanvas\" ref={(thisDiv) => {component.gameCanvas = thisDiv}} style={{height: height}} >\r\n                        <TitleContainer/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./pixiComponent.scss\";\r\nimport TitleContainer from \"../title/TitleContainer.js\";\r\nimport DragonBonesScene from \"../../out/DragonBonesScene.js\";\r\n\r\nimport skeleton from \"../../out/resource/parallaxCove_ske.json\";\r\nimport texJson from \"../../out/resource/parallaxCove_tex.json\";\r\nimport texPng from \"../../out/resource/parallaxCove_tex.png\"; //Import so webpack puts the png in the build/static/media folder. Webpack returns the path to the file.\r\n\r\nfunction FunctionalPixiComponent(props) {\r\n  const gameCanvas = useRef(null);\r\n  let pixiHandler;\r\n  let height = window.innerHeight;\r\n\r\n  useEffect(() => {\r\n    pixiHandler = new DragonBonesScene(\r\n      gameCanvas.current,\r\n      skeleton,\r\n      texJson,\r\n      texPng\r\n    );\r\n    window.addEventListener(\"resize\", resizeRenderer);\r\n    window.addEventListener(\"mousemove\", mouseHandler);\r\n    window.addEventListener(\"touchmove\", touchHandler);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeRenderer);\r\n      window.removeEventListener(\"mousemove\", mouseHandler);\r\n      window.removeEventListener(\"touchmove\", touchHandler);\r\n    };\r\n  }, []);\r\n\r\n  let mouseHandler = e => {\r\n    let pageX = e.pageX;\r\n    let pageY = e.pageY;\r\n    pixiHandler.parallax(pageX, pageY);\r\n  };\r\n\r\n  let touchHandler = e => {\r\n    let pageX = e.touches[0].clientX;\r\n    let pageY = e.touches[0].clientY;\r\n    pixiHandler.parallax(pageX, pageY);\r\n  };\r\n\r\n  let resizeRenderer = () => {\r\n    pixiHandler.resizeRenderer(\r\n      gameCanvas.current.clientWidth,\r\n      window.innerHeight\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n        <div className=\"pixiCanvas\" ref={gameCanvas} style={{ height: height }}>\r\n          <TitleContainer />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FunctionalPixiComponent;\r\n","import { connect } from \"react-redux\";\r\nimport PixiComponent from \"./PixiComponent.js\";\r\nimport FunctionalPixiComponent from \"./FunctionalPixiComponent\";\r\nimport { changeText } from \"../../actions/animationActions.js\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    text: state.animation.animationText,\r\n    animation: state.animation.animationName\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeText: text => dispatch(changeText(text))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FunctionalPixiComponent);\r\n","export function changeText(text){\r\n    return {\r\n        type: \"CHANGE_TEXT\",\r\n        payload: text,\r\n    }\r\n}\r\n\r\nexport function changeAnimation(animationName){\r\n    return {\r\n        type: \"CHANGE_ANIMATION\",\r\n        payload: animationName,\r\n    }\r\n}"],"sourceRoot":""}